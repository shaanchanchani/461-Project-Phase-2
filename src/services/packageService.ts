// src/services/packageService.ts
import { log } from '../logger';
import type { Package, PackageData, PackageMetadata } from '../types';
import { DynamoDBService, dynamoDBService } from './dynamoDBService';

export class PackageService {
    private db: DynamoDBService;

    constructor() {
        this.db = dynamoDBService;
    }

    static async createPackage(packageData: PackageData, metadata?: PackageMetadata): Promise<Package> {
        try {
            log.info('Creating new package');
            
            // Validate package data
            if (!metadata?.Name || !metadata?.Version) {
                throw new Error('Missing required metadata fields');
            }

            if ((packageData.Content && packageData.URL) || (!packageData.Content && !packageData.URL)) {
                throw new Error('Must provide either Content or URL, but not both');
            }

            // Create package object
            const pkg: Package = {
                metadata: {
                    Name: metadata.Name,
                    Version: metadata.Version,
                    ID: metadata.ID || '' // Will be generated by DynamoDB service
                },
                data: packageData
            };

            // Store in DynamoDB
            const createdPackage = await dynamoDBService.createPackage(pkg);
            log.info(`Successfully created package ${metadata.Name} v${metadata.Version}`);
            
            return createdPackage;
        } catch (error) {
            log.error('Error creating package:', error);
            throw error;
        }
    }

    static async getPackage(id: string): Promise<Package> {
        try {
            const pkg = await dynamoDBService.getPackage(id);
            if (!pkg) {
                throw new Error('Package not found');
            }
            return pkg;
        } catch (error) {
            log.error('Error retrieving package:', error);
            throw error;
        }
    }

    static async updatePackage(id: string, packageData: PackageData): Promise<void> {
        // Not implemented yet - we'll add this later if needed
        throw new Error('Not implemented');
    }

    static async resetRegistry(): Promise<void> {
        // Not implemented yet - we'll add this later if needed
        throw new Error('Not implemented');
    }
}